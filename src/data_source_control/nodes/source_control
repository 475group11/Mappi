#!/usr/bin/env python

import math
import rospy
import tf2_ros
from geometry_msgs.msg import TransformStamped
from sensor_msgs.msg import Imu
from mappi_msgs.msg import PositionVelocityAcceleration

# read-only fields
FREQUENCY = 10.0  # refresh frequency of the system
GRAV_ACCELERATION = 9.81
THRESHOLD_ACTIVATE = 10.0  # ratio of lidar acc to imu acc to activate dr
THRESHOLD_DEACTIVATE = 10.0  # ratio of " to " to deactivate dr

# globals
# note that _imu_pva position is the transform from odom to dead_reckoning
_imu_pva = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
_lidar_pva = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

def update_imu_pv(dead_reckoning_on):
   if dead_reckoning_on:  # approximate current location based on previous vectors
      for val in range(3):
         _imu_pva[0][val] = _imu_pva[0][val] + \
            (1.0/FREQUENCY)*_imu_pva[1][val] + (1.0/FREQUENCY)**2*_imu_pva[2][val]
      for val in range(3):
         _imu_pva[1][val] = _imu_pva[1][val] + (1.0/FREQUENCY)*_imu_pva[2][val]
   else:  # set all the velocities to what is given by the lidar
      for val in range(2):
         _imu_pva[1][val] = _lidar_pva[1][val]

def dead_reckoning(dead_reckoning_active):
   imu_a_mag = math.sqrt(_imu_pva[2][0]**2 + _imu_pva[2][1]**2 + _imu_pva[2][2]**2)
   lidar_a_mag = math.sqrt(_lidar_pva[2][0]**2 + _lidar_pva[2][1]**2 + _lidar_pva[2][2]**2)
   if imu_a_mag == 0.0:
      ratio = 0.0
   else:
      ratio = lidar_a_mag / imu_a_mag
   if dead_reckoning_active:
      if ratio > THRESHOLD_DEACTIVATE:
         return False
   else:
      if ratio > THRESHOLD_ACTIVATE:
         return True
   # Maintain current state
   return dead_reckoning_active

def imu_callback(msg):
   # # listener transform from base_link to map
   # tfBuffer = tf2_ros.Buffer()
   # listener = tf2_ros.TransformListener(tfBuffer)
   # # get the transformation between the base link (where the IMU is located) and the map
   # trans = tfBuffer.lookup_transform('base_link', 'map', rospy.Time.now(), rospy.Duration(1.0))

   # adjust for acceleration due to gravity here to simplify operations later
   _imu_pva[2] = [msg.linear_acceleration.x, msg.linear_acceleration.y,
      msg.linear_acceleration.z - GRAV_ACCELERATION]

def lidar_callback(msg):
   _lidar_pva[0] = [msg.position.x, msg.position.y, msg.position.z]
   _lidar_pva[1] = [msg.velocity.x, msg.velocity.y, msg.velocity.z]
   _lidar_pva[2] = [msg.acceleration.x, msg.acceleration.y, msg.acceleration.z]

def control():
   sub_imu = rospy.Subscriber('imu', Imu, imu_callback)
   sub_lidar = rospy.Subscriber('slam_pva', PositionVelocityAcceleration, lidar_callback)
   rospy.init_node('source_control', anonymous=True)
   rate = rospy.Rate(int(FREQUENCY))
   # published transformation from odom to dead_reckoning
   pub = tf2_ros.TransformBroadcaster()
   dead_reckoning_active = False  # initialize without dead_reckoning
   while not rospy.is_shutdown():
      # determine if dead_reckoning should begin / stop / continue
      dead_reckoning_active = dead_reckoning(dead_reckoning_active)
      rospy.loginfo(dead_reckoning_active)
      update_imu_pv(dead_reckoning_active)
      # set up the transform from odom to dead_reckoning
      t = TransformStamped()

      t.header.stamp = rospy.Time.now()
      t.header.frame_id = "odom"
      t.child_frame_id = "dead_reckoning"
      t.transform.translation.x = _imu_pva[0][0]
      t.transform.translation.y = _imu_pva[0][1]
      t.transform.translation.z = _imu_pva[0][2]
      # this assumes that other transform values (orientation) default to zero
      # Set the Z field of the quaternion to 1 (giving it a valid vector)
      # (rotation will still be zero)
      t.transform.rotation.z = 1

      pub.sendTransform(t)
      rate.sleep()

if __name__ == '__main__':
    try:
        control()
    except rospy.ROSInterruptException:
        pass
